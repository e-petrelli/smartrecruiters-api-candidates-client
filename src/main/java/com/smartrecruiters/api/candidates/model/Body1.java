/*
 * Candidates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.smartrecruiters.api.candidates.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
/**
 * Body1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-05-29T00:16:14.530797+01:00[Europe/London]")
public class Body1 {
  /**
   * Type of attachment you want to upload.
   */
  @JsonAdapter(AttachmentTypeEnum.Adapter.class)
  public enum AttachmentTypeEnum {
    GENERIC_FILE("GENERIC_FILE"),
    RESUME("RESUME"),
    COVER_LETTER("COVER_LETTER");

    private String value;

    AttachmentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AttachmentTypeEnum fromValue(String text) {
      for (AttachmentTypeEnum b : AttachmentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AttachmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttachmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttachmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttachmentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("attachmentType")
  private AttachmentTypeEnum attachmentType = AttachmentTypeEnum.GENERIC_FILE;

  @SerializedName("file")
  private File file = null;

  public Body1 attachmentType(AttachmentTypeEnum attachmentType) {
    this.attachmentType = attachmentType;
    return this;
  }

   /**
   * Type of attachment you want to upload.
   * @return attachmentType
  **/
  @Schema(required = true, description = "Type of attachment you want to upload.")
  public AttachmentTypeEnum getAttachmentType() {
    return attachmentType;
  }

  public void setAttachmentType(AttachmentTypeEnum attachmentType) {
    this.attachmentType = attachmentType;
  }

  public Body1 file(File file) {
    this.file = file;
    return this;
  }

   /**
   * File to upload.
   * @return file
  **/
  @Schema(required = true, description = "File to upload.")
  public File getFile() {
    return file;
  }

  public void setFile(File file) {
    this.file = file;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body1 body1 = (Body1) o;
    return Objects.equals(this.attachmentType, body1.attachmentType) &&
        Objects.equals(this.file, body1.file);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentType, Objects.hashCode(file));
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body1 {\n");
    
    sb.append("    attachmentType: ").append(toIndentedString(attachmentType)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
