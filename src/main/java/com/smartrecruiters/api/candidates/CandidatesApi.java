/*
 * Candidates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.smartrecruiters.api.candidates;

import com.smartrecruiters.api.ApiCallback;
import com.smartrecruiters.api.ApiClient;
import com.smartrecruiters.api.ApiException;
import com.smartrecruiters.api.ApiResponse;
import com.smartrecruiters.api.Configuration;
import com.smartrecruiters.api.Pair;
import com.smartrecruiters.api.ProgressRequestBody;
import com.smartrecruiters.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.candidates.model.Application;
import com.smartrecruiters.api.candidates.model.Attachment;
import com.smartrecruiters.api.candidates.model.Attachments;
import com.smartrecruiters.api.candidates.model.CandidateAttachmentForJob;
import com.smartrecruiters.api.candidates.model.CandidateAttachmentsForJob;
import com.smartrecruiters.api.candidates.model.CandidateConsentStatus;
import com.smartrecruiters.api.candidates.model.CandidateDetails;
import com.smartrecruiters.api.candidates.model.CandidateInput;
import com.smartrecruiters.api.candidates.model.CandidateProperties;
import com.smartrecruiters.api.candidates.model.CandidatePropertyInputValue;
import com.smartrecruiters.api.candidates.model.CandidateSource;
import com.smartrecruiters.api.candidates.model.CandidateStatus;
import com.smartrecruiters.api.candidates.model.CandidateStatusHistoryList;
import com.smartrecruiters.api.candidates.model.CandidateTags;
import com.smartrecruiters.api.candidates.model.Candidates;
import com.smartrecruiters.api.candidates.model.ConsentRequestsResults;
import com.smartrecruiters.api.candidates.model.ConsentStatus;
import com.smartrecruiters.api.candidates.model.ErrorResponse;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import com.smartrecruiters.api.candidates.model.OnboardingStatus;
import com.smartrecruiters.api.candidates.model.PersonalDetails;
import com.smartrecruiters.api.candidates.model.ScreeningAnswers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CandidatesApi {
    private ApiClient apiClient;

    public CandidatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CandidatesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for candidatesAdd
     * @param body Candidate object that needs to be created. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAddCall(CandidateInput body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAddValidateBeforeCall(CandidateInput body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesAdd(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAddCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new candidate and assign to a Talent Pool
     * Create a new candidate and assign to a Talent Pool.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app/integration, add below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app/integration is productised (available to all SmartRecruiters customers) 
     * @param body Candidate object that needs to be created. (required)
     * @return CandidateDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateDetails candidatesAdd(CandidateInput body) throws ApiException {
        ApiResponse<CandidateDetails> resp = candidatesAddWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new candidate and assign to a Talent Pool
     * Create a new candidate and assign to a Talent Pool.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app/integration, add below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app/integration is productised (available to all SmartRecruiters customers) 
     * @param body Candidate object that needs to be created. (required)
     * @return ApiResponse&lt;CandidateDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateDetails> candidatesAddWithHttpInfo(CandidateInput body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAddValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new candidate and assign to a Talent Pool (asynchronously)
     * Create a new candidate and assign to a Talent Pool.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app/integration, add below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app/integration is productised (available to all SmartRecruiters customers) 
     * @param body Candidate object that needs to be created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAddAsync(CandidateInput body, final ApiCallback<CandidateDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAddValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesAddToJob
     * @param body Candidate object that needs to be created. (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAddToJobCall(CandidateInput body, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/jobs/{jobId}/candidates"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAddToJobValidateBeforeCall(CandidateInput body, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesAddToJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesAddToJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAddToJobCall(body, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new candidate and assign to a job
     * Create a new candidate and assign to a job.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app / integration, add the below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app / integration is productised (available to all SmartRecruiters customers) 
     * @param body Candidate object that needs to be created. (required)
     * @param jobId job identifier (required)
     * @return CandidateDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateDetails candidatesAddToJob(CandidateInput body, String jobId) throws ApiException {
        ApiResponse<CandidateDetails> resp = candidatesAddToJobWithHttpInfo(body, jobId);
        return resp.getData();
    }

    /**
     * Create a new candidate and assign to a job
     * Create a new candidate and assign to a job.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app / integration, add the below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app / integration is productised (available to all SmartRecruiters customers) 
     * @param body Candidate object that needs to be created. (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;CandidateDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateDetails> candidatesAddToJobWithHttpInfo(CandidateInput body, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAddToJobValidateBeforeCall(body, jobId, null, null);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new candidate and assign to a job (asynchronously)
     * Create a new candidate and assign to a job.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app / integration, add the below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app / integration is productised (available to all SmartRecruiters customers) 
     * @param body Candidate object that needs to be created. (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAddToJobAsync(CandidateInput body, String jobId, final ApiCallback<CandidateDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAddToJobValidateBeforeCall(body, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesAll
     * @param q keyword search on all candidate fields; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param pageId page id of elements to return (optional)
     * @param jobId job filter to display candidates who applied for a job [id]; can be used repeatedly; (optional)
     * @param location location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow (optional)
     * @param averageRating average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4 (optional)
     * @param status candidate’s status filter in a context of a job; can be used repeatedly (optional)
     * @param consentStatus candidate’s consent status filter; can be used repeatedly (optional)
     * @param subStatus candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \&quot;status\&quot; field. (optional)
     * @param tag tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param onboardingStatus candidate&#x27;s onboarding status (optional)
     * @param propertyId candidate&#x27;s property id (1-N) (optional, default to [])
     * @param propertyValueId candidate&#x27;s property value id (1-N) (optional, default to [])
     * @param sourceType candidate&#x27;s source type (1-N) (optional, default to [])
     * @param sourceSubType candidate&#x27;s source subtype (1-N) (optional, default to [])
     * @param sourceValueId candidate&#x27;s source value id (1-N) (optional, default to [])
     * @param questionCategory screening question category (1-N) (optional, default to [])
     * @param questionFieldId screening question field id (1-N) (optional, default to [])
     * @param questionFieldValueId screening question field value id (1-N) (optional, default to [])
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAllCall(String q, Integer limit, Integer offset, String pageId, List<String> jobId, List<String> location, List<Integer> averageRating, List<String> status, List<ConsentStatus> consentStatus, String subStatus, List<String> tag, OffsetDateTime updatedAfter, String onboardingStatus, List<String> propertyId, List<String> propertyValueId, List<String> sourceType, List<String> sourceSubType, List<String> sourceValueId, List<String> questionCategory, List<String> questionFieldId, List<String> questionFieldValueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (pageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageId", pageId));
        if (jobId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "jobId", jobId));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (averageRating != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "averageRating", averageRating));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (consentStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "consentStatus", consentStatus));
        if (subStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subStatus", subStatus));
        if (tag != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tag", tag));
        if (updatedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updatedAfter", updatedAfter));
        if (onboardingStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onboardingStatus", onboardingStatus));
        if (propertyId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyId", propertyId));
        if (propertyValueId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyValueId", propertyValueId));
        if (sourceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sourceType", sourceType));
        if (sourceSubType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sourceSubType", sourceSubType));
        if (sourceValueId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sourceValueId", sourceValueId));
        if (questionCategory != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "questionCategory", questionCategory));
        if (questionFieldId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "questionFieldId", questionFieldId));
        if (questionFieldValueId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "questionFieldValueId", questionFieldValueId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAllValidateBeforeCall(String q, Integer limit, Integer offset, String pageId, List<String> jobId, List<String> location, List<Integer> averageRating, List<String> status, List<ConsentStatus> consentStatus, String subStatus, List<String> tag, OffsetDateTime updatedAfter, String onboardingStatus, List<String> propertyId, List<String> propertyValueId, List<String> sourceType, List<String> sourceSubType, List<String> sourceValueId, List<String> questionCategory, List<String> questionFieldId, List<String> questionFieldValueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = candidatesAllCall(q, limit, offset, pageId, jobId, location, averageRating, status, consentStatus, subStatus, tag, updatedAfter, onboardingStatus, propertyId, propertyValueId, sourceType, sourceSubType, sourceValueId, questionCategory, questionFieldId, questionFieldValueId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search candidates
     * 
     * @param q keyword search on all candidate fields; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param pageId page id of elements to return (optional)
     * @param jobId job filter to display candidates who applied for a job [id]; can be used repeatedly; (optional)
     * @param location location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow (optional)
     * @param averageRating average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4 (optional)
     * @param status candidate’s status filter in a context of a job; can be used repeatedly (optional)
     * @param consentStatus candidate’s consent status filter; can be used repeatedly (optional)
     * @param subStatus candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \&quot;status\&quot; field. (optional)
     * @param tag tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param onboardingStatus candidate&#x27;s onboarding status (optional)
     * @param propertyId candidate&#x27;s property id (1-N) (optional, default to [])
     * @param propertyValueId candidate&#x27;s property value id (1-N) (optional, default to [])
     * @param sourceType candidate&#x27;s source type (1-N) (optional, default to [])
     * @param sourceSubType candidate&#x27;s source subtype (1-N) (optional, default to [])
     * @param sourceValueId candidate&#x27;s source value id (1-N) (optional, default to [])
     * @param questionCategory screening question category (1-N) (optional, default to [])
     * @param questionFieldId screening question field id (1-N) (optional, default to [])
     * @param questionFieldValueId screening question field value id (1-N) (optional, default to [])
     * @return Candidates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Candidates candidatesAll(String q, Integer limit, Integer offset, String pageId, List<String> jobId, List<String> location, List<Integer> averageRating, List<String> status, List<ConsentStatus> consentStatus, String subStatus, List<String> tag, OffsetDateTime updatedAfter, String onboardingStatus, List<String> propertyId, List<String> propertyValueId, List<String> sourceType, List<String> sourceSubType, List<String> sourceValueId, List<String> questionCategory, List<String> questionFieldId, List<String> questionFieldValueId) throws ApiException {
        ApiResponse<Candidates> resp = candidatesAllWithHttpInfo(q, limit, offset, pageId, jobId, location, averageRating, status, consentStatus, subStatus, tag, updatedAfter, onboardingStatus, propertyId, propertyValueId, sourceType, sourceSubType, sourceValueId, questionCategory, questionFieldId, questionFieldValueId);
        return resp.getData();
    }

    /**
     * Search candidates
     * 
     * @param q keyword search on all candidate fields; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param pageId page id of elements to return (optional)
     * @param jobId job filter to display candidates who applied for a job [id]; can be used repeatedly; (optional)
     * @param location location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow (optional)
     * @param averageRating average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4 (optional)
     * @param status candidate’s status filter in a context of a job; can be used repeatedly (optional)
     * @param consentStatus candidate’s consent status filter; can be used repeatedly (optional)
     * @param subStatus candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \&quot;status\&quot; field. (optional)
     * @param tag tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param onboardingStatus candidate&#x27;s onboarding status (optional)
     * @param propertyId candidate&#x27;s property id (1-N) (optional, default to [])
     * @param propertyValueId candidate&#x27;s property value id (1-N) (optional, default to [])
     * @param sourceType candidate&#x27;s source type (1-N) (optional, default to [])
     * @param sourceSubType candidate&#x27;s source subtype (1-N) (optional, default to [])
     * @param sourceValueId candidate&#x27;s source value id (1-N) (optional, default to [])
     * @param questionCategory screening question category (1-N) (optional, default to [])
     * @param questionFieldId screening question field id (1-N) (optional, default to [])
     * @param questionFieldValueId screening question field value id (1-N) (optional, default to [])
     * @return ApiResponse&lt;Candidates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Candidates> candidatesAllWithHttpInfo(String q, Integer limit, Integer offset, String pageId, List<String> jobId, List<String> location, List<Integer> averageRating, List<String> status, List<ConsentStatus> consentStatus, String subStatus, List<String> tag, OffsetDateTime updatedAfter, String onboardingStatus, List<String> propertyId, List<String> propertyValueId, List<String> sourceType, List<String> sourceSubType, List<String> sourceValueId, List<String> questionCategory, List<String> questionFieldId, List<String> questionFieldValueId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAllValidateBeforeCall(q, limit, offset, pageId, jobId, location, averageRating, status, consentStatus, subStatus, tag, updatedAfter, onboardingStatus, propertyId, propertyValueId, sourceType, sourceSubType, sourceValueId, questionCategory, questionFieldId, questionFieldValueId, null, null);
        Type localVarReturnType = new TypeToken<Candidates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search candidates (asynchronously)
     * 
     * @param q keyword search on all candidate fields; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param pageId page id of elements to return (optional)
     * @param jobId job filter to display candidates who applied for a job [id]; can be used repeatedly; (optional)
     * @param location location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow (optional)
     * @param averageRating average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4 (optional)
     * @param status candidate’s status filter in a context of a job; can be used repeatedly (optional)
     * @param consentStatus candidate’s consent status filter; can be used repeatedly (optional)
     * @param subStatus candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \&quot;status\&quot; field. (optional)
     * @param tag tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param onboardingStatus candidate&#x27;s onboarding status (optional)
     * @param propertyId candidate&#x27;s property id (1-N) (optional, default to [])
     * @param propertyValueId candidate&#x27;s property value id (1-N) (optional, default to [])
     * @param sourceType candidate&#x27;s source type (1-N) (optional, default to [])
     * @param sourceSubType candidate&#x27;s source subtype (1-N) (optional, default to [])
     * @param sourceValueId candidate&#x27;s source value id (1-N) (optional, default to [])
     * @param questionCategory screening question category (1-N) (optional, default to [])
     * @param questionFieldId screening question field id (1-N) (optional, default to [])
     * @param questionFieldValueId screening question field value id (1-N) (optional, default to [])
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAllAsync(String q, Integer limit, Integer offset, String pageId, List<String> jobId, List<String> location, List<Integer> averageRating, List<String> status, List<ConsentStatus> consentStatus, String subStatus, List<String> tag, OffsetDateTime updatedAfter, String onboardingStatus, List<String> propertyId, List<String> propertyValueId, List<String> sourceType, List<String> sourceSubType, List<String> sourceValueId, List<String> questionCategory, List<String> questionFieldId, List<String> questionFieldValueId, final ApiCallback<Candidates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAllValidateBeforeCall(q, limit, offset, pageId, jobId, location, averageRating, status, consentStatus, subStatus, tag, updatedAfter, onboardingStatus, propertyId, propertyValueId, sourceType, sourceSubType, sourceValueId, questionCategory, questionFieldId, questionFieldValueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Candidates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsAdd
     * @param id candidate identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsAddCall(String id, String attachmentType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/attachments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (attachmentType != null)
        localVarFormParams.put("attachmentType", attachmentType);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsAddValidateBeforeCall(String id, String attachmentType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesAttachmentsAdd(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsAddCall(id, attachmentType, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Attach files to a candidate.
     * Attach files to a candidate.
     * @param id candidate identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Attachment candidatesAttachmentsAdd(String id, String attachmentType, File file) throws ApiException {
        ApiResponse<Attachment> resp = candidatesAttachmentsAddWithHttpInfo(id, attachmentType, file);
        return resp.getData();
    }

    /**
     * Attach files to a candidate.
     * Attach files to a candidate.
     * @param id candidate identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Attachment> candidatesAttachmentsAddWithHttpInfo(String id, String attachmentType, File file) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsAddValidateBeforeCall(id, attachmentType, file, null, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach files to a candidate. (asynchronously)
     * Attach files to a candidate.
     * @param id candidate identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsAddAsync(String id, String attachmentType, File file, final ApiCallback<Attachment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsAddValidateBeforeCall(id, attachmentType, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsAddForJob
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsAddForJobCall(String id, String jobId, String attachmentType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/attachments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (attachmentType != null)
        localVarFormParams.put("attachmentType", attachmentType);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsAddForJobValidateBeforeCall(String id, String jobId, String attachmentType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesAttachmentsAddForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesAttachmentsAddForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsAddForJobCall(id, jobId, attachmentType, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Attach file to candidate in context of given job.
     * Attach file to candidate in context of given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @return CandidateAttachmentForJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateAttachmentForJob candidatesAttachmentsAddForJob(String id, String jobId, String attachmentType, File file) throws ApiException {
        ApiResponse<CandidateAttachmentForJob> resp = candidatesAttachmentsAddForJobWithHttpInfo(id, jobId, attachmentType, file);
        return resp.getData();
    }

    /**
     * Attach file to candidate in context of given job.
     * Attach file to candidate in context of given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;CandidateAttachmentForJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateAttachmentForJob> candidatesAttachmentsAddForJobWithHttpInfo(String id, String jobId, String attachmentType, File file) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsAddForJobValidateBeforeCall(id, jobId, attachmentType, file, null, null);
        Type localVarReturnType = new TypeToken<CandidateAttachmentForJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach file to candidate in context of given job. (asynchronously)
     * Attach file to candidate in context of given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param attachmentType  (optional)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsAddForJobAsync(String id, String jobId, String attachmentType, File file, final ApiCallback<CandidateAttachmentForJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsAddForJobValidateBeforeCall(id, jobId, attachmentType, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateAttachmentForJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsDeleteForJob
     * @param attachmentId attachment identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsDeleteForJobCall(String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/attachments/{attachmentId}"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsDeleteForJobValidateBeforeCall(String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling candidatesAttachmentsDeleteForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsDeleteForJobCall(attachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete attachment.
     * Delete attachment.
     * @param attachmentId attachment identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesAttachmentsDeleteForJob(String attachmentId) throws ApiException {
        candidatesAttachmentsDeleteForJobWithHttpInfo(attachmentId);
    }

    /**
     * Delete attachment.
     * Delete attachment.
     * @param attachmentId attachment identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesAttachmentsDeleteForJobWithHttpInfo(String attachmentId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsDeleteForJobValidateBeforeCall(attachmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete attachment. (asynchronously)
     * Delete attachment.
     * @param attachmentId attachment identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsDeleteForJobAsync(String attachmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsDeleteForJobValidateBeforeCall(attachmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsGet
     * @param id candidate identifier (required)
     * @param attachmentId Identifier of an attachment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsGetCall(String id, String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/attachments/{attachmentId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsGetValidateBeforeCall(String id, String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesAttachmentsGet(Async)");
        }
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling candidatesAttachmentsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsGetCall(id, attachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a candidate&#x27;s attachment.
     * Get a candidate&#x27;s attachment.
     * @param id candidate identifier (required)
     * @param attachmentId Identifier of an attachment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesAttachmentsGet(String id, String attachmentId) throws ApiException {
        candidatesAttachmentsGetWithHttpInfo(id, attachmentId);
    }

    /**
     * Get a candidate&#x27;s attachment.
     * Get a candidate&#x27;s attachment.
     * @param id candidate identifier (required)
     * @param attachmentId Identifier of an attachment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesAttachmentsGetWithHttpInfo(String id, String attachmentId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsGetValidateBeforeCall(id, attachmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get a candidate&#x27;s attachment. (asynchronously)
     * Get a candidate&#x27;s attachment.
     * @param id candidate identifier (required)
     * @param attachmentId Identifier of an attachment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsGetAsync(String id, String attachmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsGetValidateBeforeCall(id, attachmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsGetForJob
     * @param attachmentId attachment identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsGetForJobCall(String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/attachments/{attachmentId}"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsGetForJobValidateBeforeCall(String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling candidatesAttachmentsGetForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsGetForJobCall(attachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get candidate&#x27;s attachment.
     * Get candidate&#x27;s attachment.
     * @param attachmentId attachment identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesAttachmentsGetForJob(String attachmentId) throws ApiException {
        candidatesAttachmentsGetForJobWithHttpInfo(attachmentId);
    }

    /**
     * Get candidate&#x27;s attachment.
     * Get candidate&#x27;s attachment.
     * @param attachmentId attachment identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesAttachmentsGetForJobWithHttpInfo(String attachmentId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsGetForJobValidateBeforeCall(attachmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get candidate&#x27;s attachment. (asynchronously)
     * Get candidate&#x27;s attachment.
     * @param attachmentId attachment identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsGetForJobAsync(String attachmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsGetForJobValidateBeforeCall(attachmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsList
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsListCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/attachments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsListValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesAttachmentsList(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsListCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list candidate&#x27;s attachments.
     * Get list of candidate&#x27;s attachments.
     * @param id candidate identifier (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Attachments candidatesAttachmentsList(String id) throws ApiException {
        ApiResponse<Attachments> resp = candidatesAttachmentsListWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get list candidate&#x27;s attachments.
     * Get list of candidate&#x27;s attachments.
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Attachments> candidatesAttachmentsListWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsListValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list candidate&#x27;s attachments. (asynchronously)
     * Get list of candidate&#x27;s attachments.
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsListAsync(String id, final ApiCallback<Attachments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsListValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesAttachmentsListForJob
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsListForJobCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/attachments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesAttachmentsListForJobValidateBeforeCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesAttachmentsListForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesAttachmentsListForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesAttachmentsListForJobCall(id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of candidate&#x27;s attachments in context of given job.
     * Get list of candidate&#x27;s attachments in context of given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return CandidateAttachmentsForJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateAttachmentsForJob candidatesAttachmentsListForJob(String id, String jobId) throws ApiException {
        ApiResponse<CandidateAttachmentsForJob> resp = candidatesAttachmentsListForJobWithHttpInfo(id, jobId);
        return resp.getData();
    }

    /**
     * Get list of candidate&#x27;s attachments in context of given job.
     * Get list of candidate&#x27;s attachments in context of given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;CandidateAttachmentsForJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateAttachmentsForJob> candidatesAttachmentsListForJobWithHttpInfo(String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesAttachmentsListForJobValidateBeforeCall(id, jobId, null, null);
        Type localVarReturnType = new TypeToken<CandidateAttachmentsForJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of candidate&#x27;s attachments in context of given job. (asynchronously)
     * Get list of candidate&#x27;s attachments in context of given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesAttachmentsListForJobAsync(String id, String jobId, final ApiCallback<CandidateAttachmentsForJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesAttachmentsListForJobValidateBeforeCall(id, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateAttachmentsForJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesConsentRequestBatch
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesConsentRequestBatchCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/consent-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesConsentRequestBatchValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = candidatesConsentRequestBatchCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request consent from multiple candidates
     * Read more about GDPR tools on [SmartRecruiters HelpCenter](https://help.smartrecruiters.com/GDPR/GDPR_Tools_for_Companies) 
     * @param body  (optional)
     * @return ConsentRequestsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentRequestsResults candidatesConsentRequestBatch(Object body) throws ApiException {
        ApiResponse<ConsentRequestsResults> resp = candidatesConsentRequestBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Request consent from multiple candidates
     * Read more about GDPR tools on [SmartRecruiters HelpCenter](https://help.smartrecruiters.com/GDPR/GDPR_Tools_for_Companies) 
     * @param body  (optional)
     * @return ApiResponse&lt;ConsentRequestsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentRequestsResults> candidatesConsentRequestBatchWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesConsentRequestBatchValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ConsentRequestsResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request consent from multiple candidates (asynchronously)
     * Read more about GDPR tools on [SmartRecruiters HelpCenter](https://help.smartrecruiters.com/GDPR/GDPR_Tools_for_Companies) 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesConsentRequestBatchAsync(Object body, final ApiCallback<ConsentRequestsResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesConsentRequestBatchValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentRequestsResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesConsentStatus
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesConsentStatusCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/consent"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesConsentStatusValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesConsentStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesConsentStatusCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Status of candidate consent
     * Get candidate consent status
     * @param id candidate identifier (required)
     * @return CandidateConsentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateConsentStatus candidatesConsentStatus(String id) throws ApiException {
        ApiResponse<CandidateConsentStatus> resp = candidatesConsentStatusWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Status of candidate consent
     * Get candidate consent status
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;CandidateConsentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateConsentStatus> candidatesConsentStatusWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesConsentStatusValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CandidateConsentStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Status of candidate consent (asynchronously)
     * Get candidate consent status
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesConsentStatusAsync(String id, final ApiCallback<CandidateConsentStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesConsentStatusValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateConsentStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesDelete
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesDeleteCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesDeleteValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesDeleteCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Candidate
     * Delete candidate
     * @param id candidate identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesDelete(String id) throws ApiException {
        candidatesDeleteWithHttpInfo(id);
    }

    /**
     * Delete Candidate
     * Delete candidate
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesDeleteWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Candidate (asynchronously)
     * Delete candidate
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesDeleteAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesGet
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get details of a candidate
     * Get details of a candidate
     * @param id candidate identifier (required)
     * @return CandidateDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateDetails candidatesGet(String id) throws ApiException {
        ApiResponse<CandidateDetails> resp = candidatesGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get details of a candidate
     * Get details of a candidate
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;CandidateDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateDetails> candidatesGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details of a candidate (asynchronously)
     * Get details of a candidate
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesGetAsync(String id, final ApiCallback<CandidateDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesGetApplication
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesGetApplicationCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesGetApplicationValidateBeforeCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesGetApplication(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesGetApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesGetApplicationCall(id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get details of a candidate&#x27;s application to a job
     * Get details of a candidate&#x27;s application to a job
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Application candidatesGetApplication(String id, String jobId) throws ApiException {
        ApiResponse<Application> resp = candidatesGetApplicationWithHttpInfo(id, jobId);
        return resp.getData();
    }

    /**
     * Get details of a candidate&#x27;s application to a job
     * Get details of a candidate&#x27;s application to a job
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Application> candidatesGetApplicationWithHttpInfo(String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesGetApplicationValidateBeforeCall(id, jobId, null, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details of a candidate&#x27;s application to a job (asynchronously)
     * Get details of a candidate&#x27;s application to a job
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesGetApplicationAsync(String id, String jobId, final ApiCallback<Application> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesGetApplicationValidateBeforeCall(id, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesOnboardingGet
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/onboardingStatus"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesOnboardingGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesOnboardingGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesOnboardingGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Onboarding Status for a candidate
     * Get Onboarding Status for a candidate. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     * @param id candidate identifier (required)
     * @return OnboardingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OnboardingStatus candidatesOnboardingGet(String id) throws ApiException {
        ApiResponse<OnboardingStatus> resp = candidatesOnboardingGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Onboarding Status for a candidate
     * Get Onboarding Status for a candidate. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;OnboardingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OnboardingStatus> candidatesOnboardingGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesOnboardingGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<OnboardingStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Onboarding Status for a candidate (asynchronously)
     * Get Onboarding Status for a candidate. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingGetAsync(String id, final ApiCallback<OnboardingStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesOnboardingGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OnboardingStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesOnboardingGetForJob
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingGetForJobCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/onboardingStatus"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesOnboardingGetForJobValidateBeforeCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesOnboardingGetForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesOnboardingGetForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesOnboardingGetForJobCall(id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Onboarding Status for a candidate associated with given job
     * Get Onboarding Status for a candidate associated with given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return OnboardingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OnboardingStatus candidatesOnboardingGetForJob(String id, String jobId) throws ApiException {
        ApiResponse<OnboardingStatus> resp = candidatesOnboardingGetForJobWithHttpInfo(id, jobId);
        return resp.getData();
    }

    /**
     * Get Onboarding Status for a candidate associated with given job
     * Get Onboarding Status for a candidate associated with given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;OnboardingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OnboardingStatus> candidatesOnboardingGetForJobWithHttpInfo(String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesOnboardingGetForJobValidateBeforeCall(id, jobId, null, null);
        Type localVarReturnType = new TypeToken<OnboardingStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Onboarding Status for a candidate associated with given job (asynchronously)
     * Get Onboarding Status for a candidate associated with given job.
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingGetForJobAsync(String id, String jobId, final ApiCallback<OnboardingStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesOnboardingGetForJobValidateBeforeCall(id, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OnboardingStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesOnboardingUpdate
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingUpdateCall(OnboardingStatus body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/onboardingStatus"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesOnboardingUpdateValidateBeforeCall(OnboardingStatus body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesOnboardingUpdate(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesOnboardingUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesOnboardingUpdateCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Onboarding Status for a candidate
     * Set Onboarding Status for a candidate. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesOnboardingUpdate(OnboardingStatus body, String id) throws ApiException {
        candidatesOnboardingUpdateWithHttpInfo(body, id);
    }

    /**
     * Set Onboarding Status for a candidate
     * Set Onboarding Status for a candidate. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesOnboardingUpdateWithHttpInfo(OnboardingStatus body, String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesOnboardingUpdateValidateBeforeCall(body, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set Onboarding Status for a candidate (asynchronously)
     * Set Onboarding Status for a candidate. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingUpdateAsync(OnboardingStatus body, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesOnboardingUpdateValidateBeforeCall(body, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesOnboardingUpdateForJob
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingUpdateForJobCall(OnboardingStatus body, String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/onboardingStatus"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesOnboardingUpdateForJobValidateBeforeCall(OnboardingStatus body, String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesOnboardingUpdateForJob(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesOnboardingUpdateForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesOnboardingUpdateForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesOnboardingUpdateForJobCall(body, id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets Onboarding Status for a candidate associated with given job
     * Sets Onboarding Status for a candidate associated with given job.
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesOnboardingUpdateForJob(OnboardingStatus body, String id, String jobId) throws ApiException {
        candidatesOnboardingUpdateForJobWithHttpInfo(body, id, jobId);
    }

    /**
     * Sets Onboarding Status for a candidate associated with given job
     * Sets Onboarding Status for a candidate associated with given job.
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesOnboardingUpdateForJobWithHttpInfo(OnboardingStatus body, String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesOnboardingUpdateForJobValidateBeforeCall(body, id, jobId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Sets Onboarding Status for a candidate associated with given job (asynchronously)
     * Sets Onboarding Status for a candidate associated with given job.
     * @param body Onboarding status. (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesOnboardingUpdateForJobAsync(OnboardingStatus body, String id, String jobId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesOnboardingUpdateForJobValidateBeforeCall(body, id, jobId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesPropertiesGet
     * @param id candidate identifier (required)
     * @param context context for candidate properties to display (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesGetCall(String id, String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/properties"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (context != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("context", context));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesPropertiesGetValidateBeforeCall(String id, String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesPropertiesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesPropertiesGetCall(id, context, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get candidate property values for a candidate
     * Please use &#x60;GET /candidates/{id}/jobs/{jobId}/properties&#x60; instead. Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     * @param id candidate identifier (required)
     * @param context context for candidate properties to display (optional)
     * @return CandidateProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateProperties candidatesPropertiesGet(String id, String context) throws ApiException {
        ApiResponse<CandidateProperties> resp = candidatesPropertiesGetWithHttpInfo(id, context);
        return resp.getData();
    }

    /**
     * Get candidate property values for a candidate
     * Please use &#x60;GET /candidates/{id}/jobs/{jobId}/properties&#x60; instead. Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     * @param id candidate identifier (required)
     * @param context context for candidate properties to display (optional)
     * @return ApiResponse&lt;CandidateProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateProperties> candidatesPropertiesGetWithHttpInfo(String id, String context) throws ApiException {
        com.squareup.okhttp.Call call = candidatesPropertiesGetValidateBeforeCall(id, context, null, null);
        Type localVarReturnType = new TypeToken<CandidateProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get candidate property values for a candidate (asynchronously)
     * Please use &#x60;GET /candidates/{id}/jobs/{jobId}/properties&#x60; instead. Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     * @param id candidate identifier (required)
     * @param context context for candidate properties to display (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesGetAsync(String id, String context, final ApiCallback<CandidateProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesPropertiesGetValidateBeforeCall(id, context, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesPropertiesGetForJob
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param context context for candidate properties to display (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesGetForJobCall(String id, String jobId, String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/properties"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (context != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("context", context));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesPropertiesGetForJobValidateBeforeCall(String id, String jobId, String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesPropertiesGetForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesPropertiesGetForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesPropertiesGetForJobCall(id, jobId, context, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get candidate property values for a candidate&#x27;s job
     * Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param context context for candidate properties to display (optional)
     * @return CandidateProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateProperties candidatesPropertiesGetForJob(String id, String jobId, String context) throws ApiException {
        ApiResponse<CandidateProperties> resp = candidatesPropertiesGetForJobWithHttpInfo(id, jobId, context);
        return resp.getData();
    }

    /**
     * Get candidate property values for a candidate&#x27;s job
     * Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param context context for candidate properties to display (optional)
     * @return ApiResponse&lt;CandidateProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateProperties> candidatesPropertiesGetForJobWithHttpInfo(String id, String jobId, String context) throws ApiException {
        com.squareup.okhttp.Call call = candidatesPropertiesGetForJobValidateBeforeCall(id, jobId, context, null, null);
        Type localVarReturnType = new TypeToken<CandidateProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get candidate property values for a candidate&#x27;s job (asynchronously)
     * Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param context context for candidate properties to display (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesGetForJobAsync(String id, String jobId, String context, final ApiCallback<CandidateProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesPropertiesGetForJobValidateBeforeCall(id, jobId, context, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesPropertiesValuesUpdate
     * @param id candidate identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesValuesUpdateCall(String id, String propertyId, CandidatePropertyInputValue body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/properties/{propertyId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "propertyId" + "\\}", apiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesPropertiesValuesUpdateValidateBeforeCall(String id, String propertyId, CandidatePropertyInputValue body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesPropertiesValuesUpdate(Async)");
        }
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling candidatesPropertiesValuesUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesPropertiesValuesUpdateCall(id, propertyId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add/update candidate property value
     * Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/properties/{propertyId}&#x60; instead. Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60; Value has to be &#x60;true&#x60; or &#x60;false&#x60;. * **COUNTRY** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60; Code of value is a currency code in ISO 4217 format. * **DATE** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60; * **NUMBER, PERCENT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60; * **REGION** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60; Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60; * **USER** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60; Value has to be a valid user id  To reset a value for any of the above types, please pass &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesPropertiesValuesUpdate(String id, String propertyId, CandidatePropertyInputValue body) throws ApiException {
        candidatesPropertiesValuesUpdateWithHttpInfo(id, propertyId, body);
    }

    /**
     * Add/update candidate property value
     * Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/properties/{propertyId}&#x60; instead. Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60; Value has to be &#x60;true&#x60; or &#x60;false&#x60;. * **COUNTRY** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60; Code of value is a currency code in ISO 4217 format. * **DATE** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60; * **NUMBER, PERCENT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60; * **REGION** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60; Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60; * **USER** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60; Value has to be a valid user id  To reset a value for any of the above types, please pass &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesPropertiesValuesUpdateWithHttpInfo(String id, String propertyId, CandidatePropertyInputValue body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesPropertiesValuesUpdateValidateBeforeCall(id, propertyId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add/update candidate property value (asynchronously)
     * Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/properties/{propertyId}&#x60; instead. Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60; Value has to be &#x60;true&#x60; or &#x60;false&#x60;. * **COUNTRY** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60; Code of value is a currency code in ISO 4217 format. * **DATE** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60; * **NUMBER, PERCENT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60; * **REGION** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60; Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60; * **USER** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60; Value has to be a valid user id  To reset a value for any of the above types, please pass &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesValuesUpdateAsync(String id, String propertyId, CandidatePropertyInputValue body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesPropertiesValuesUpdateValidateBeforeCall(id, propertyId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesPropertiesValuesUpdateForJob
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesValuesUpdateForJobCall(String id, String jobId, String propertyId, CandidatePropertyInputValue body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/properties/{propertyId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "propertyId" + "\\}", apiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesPropertiesValuesUpdateForJobValidateBeforeCall(String id, String jobId, String propertyId, CandidatePropertyInputValue body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesPropertiesValuesUpdateForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesPropertiesValuesUpdateForJob(Async)");
        }
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling candidatesPropertiesValuesUpdateForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesPropertiesValuesUpdateForJobCall(id, jobId, propertyId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add/update candidate property value
     * Set a candidate property value for the candidate.  Below you can find a list of value examples, dependent on different candidate property types.  ### BOOLEAN  &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60;  Value has to be &#x60;true&#x60; or &#x60;false&#x60;.  ### COUNTRY  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-1 alpha-2 format.  ### CURRENCY  &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60;  Code of value is a currency code in ISO 4217 format.  ### DATE  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60;  ### NUMBER, PERCENT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60;  ### REGION  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-2 compatible format.  ### SINGLE_SELECT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60;  Value has to be an id of candidate property value (provided by &#x60;GET /configuration/candidate-properties/{propertyId}/values&#x60;).  ### TEXT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60;  ### USER  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60;  Value has to be a valid user id  ### Resetting a value  To reset a value for any of the above types, please pass:  &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesPropertiesValuesUpdateForJob(String id, String jobId, String propertyId, CandidatePropertyInputValue body) throws ApiException {
        candidatesPropertiesValuesUpdateForJobWithHttpInfo(id, jobId, propertyId, body);
    }

    /**
     * Add/update candidate property value
     * Set a candidate property value for the candidate.  Below you can find a list of value examples, dependent on different candidate property types.  ### BOOLEAN  &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60;  Value has to be &#x60;true&#x60; or &#x60;false&#x60;.  ### COUNTRY  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-1 alpha-2 format.  ### CURRENCY  &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60;  Code of value is a currency code in ISO 4217 format.  ### DATE  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60;  ### NUMBER, PERCENT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60;  ### REGION  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-2 compatible format.  ### SINGLE_SELECT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60;  Value has to be an id of candidate property value (provided by &#x60;GET /configuration/candidate-properties/{propertyId}/values&#x60;).  ### TEXT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60;  ### USER  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60;  Value has to be a valid user id  ### Resetting a value  To reset a value for any of the above types, please pass:  &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesPropertiesValuesUpdateForJobWithHttpInfo(String id, String jobId, String propertyId, CandidatePropertyInputValue body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesPropertiesValuesUpdateForJobValidateBeforeCall(id, jobId, propertyId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add/update candidate property value (asynchronously)
     * Set a candidate property value for the candidate.  Below you can find a list of value examples, dependent on different candidate property types.  ### BOOLEAN  &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60;  Value has to be &#x60;true&#x60; or &#x60;false&#x60;.  ### COUNTRY  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-1 alpha-2 format.  ### CURRENCY  &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60;  Code of value is a currency code in ISO 4217 format.  ### DATE  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60;  ### NUMBER, PERCENT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60;  ### REGION  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-2 compatible format.  ### SINGLE_SELECT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60;  Value has to be an id of candidate property value (provided by &#x60;GET /configuration/candidate-properties/{propertyId}/values&#x60;).  ### TEXT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60;  ### USER  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60;  Value has to be a valid user id  ### Resetting a value  To reset a value for any of the above types, please pass:  &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param propertyId Identifier of a Candidate Property (required)
     * @param body Input value of the candidate property. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesPropertiesValuesUpdateForJobAsync(String id, String jobId, String propertyId, CandidatePropertyInputValue body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesPropertiesValuesUpdateForJobValidateBeforeCall(id, jobId, propertyId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesResumeAdd
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesResumeAddCall(String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/cv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (sourceTypeId != null)
        localVarFormParams.put("sourceTypeId", sourceTypeId);
        if (sourceSubTypeId != null)
        localVarFormParams.put("sourceSubTypeId", sourceSubTypeId);
        if (sourceId != null)
        localVarFormParams.put("sourceId", sourceId);
        if (internal != null)
        localVarFormParams.put("internal", internal);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesResumeAddValidateBeforeCall(String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = candidatesResumeAddCall(sourceTypeId, sourceSubTypeId, sourceId, internal, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Parse a resume, create a candidate and assign to a Talent Pool.
     * Parse a resume, create a candidate and assign to a Talent Pool.
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @return CandidateDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateDetails candidatesResumeAdd(String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file) throws ApiException {
        ApiResponse<CandidateDetails> resp = candidatesResumeAddWithHttpInfo(sourceTypeId, sourceSubTypeId, sourceId, internal, file);
        return resp.getData();
    }

    /**
     * Parse a resume, create a candidate and assign to a Talent Pool.
     * Parse a resume, create a candidate and assign to a Talent Pool.
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;CandidateDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateDetails> candidatesResumeAddWithHttpInfo(String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file) throws ApiException {
        com.squareup.okhttp.Call call = candidatesResumeAddValidateBeforeCall(sourceTypeId, sourceSubTypeId, sourceId, internal, file, null, null);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Parse a resume, create a candidate and assign to a Talent Pool. (asynchronously)
     * Parse a resume, create a candidate and assign to a Talent Pool.
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesResumeAddAsync(String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file, final ApiCallback<CandidateDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesResumeAddValidateBeforeCall(sourceTypeId, sourceSubTypeId, sourceId, internal, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesResumeAddToJob
     * @param jobId job identifier (required)
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesResumeAddToJobCall(String jobId, String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/jobs/{jobId}/candidates/cv"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (sourceTypeId != null)
        localVarFormParams.put("sourceTypeId", sourceTypeId);
        if (sourceSubTypeId != null)
        localVarFormParams.put("sourceSubTypeId", sourceSubTypeId);
        if (sourceId != null)
        localVarFormParams.put("sourceId", sourceId);
        if (internal != null)
        localVarFormParams.put("internal", internal);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesResumeAddToJobValidateBeforeCall(String jobId, String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesResumeAddToJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesResumeAddToJobCall(jobId, sourceTypeId, sourceSubTypeId, sourceId, internal, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Parse a resume, create a candidate and assign to a job.
     * Parse a resume, create a candidate and assign to a job.
     * @param jobId job identifier (required)
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @return CandidateDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateDetails candidatesResumeAddToJob(String jobId, String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file) throws ApiException {
        ApiResponse<CandidateDetails> resp = candidatesResumeAddToJobWithHttpInfo(jobId, sourceTypeId, sourceSubTypeId, sourceId, internal, file);
        return resp.getData();
    }

    /**
     * Parse a resume, create a candidate and assign to a job.
     * Parse a resume, create a candidate and assign to a job.
     * @param jobId job identifier (required)
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;CandidateDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateDetails> candidatesResumeAddToJobWithHttpInfo(String jobId, String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file) throws ApiException {
        com.squareup.okhttp.Call call = candidatesResumeAddToJobValidateBeforeCall(jobId, sourceTypeId, sourceSubTypeId, sourceId, internal, file, null, null);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Parse a resume, create a candidate and assign to a job. (asynchronously)
     * Parse a resume, create a candidate and assign to a job.
     * @param jobId job identifier (required)
     * @param sourceTypeId  (optional)
     * @param sourceSubTypeId  (optional)
     * @param sourceId  (optional)
     * @param internal  (optional)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesResumeAddToJobAsync(String jobId, String sourceTypeId, String sourceSubTypeId, String sourceId, Boolean internal, File file, final ApiCallback<CandidateDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesResumeAddToJobValidateBeforeCall(jobId, sourceTypeId, sourceSubTypeId, sourceId, internal, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesScreeningAnswersGet
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesScreeningAnswersGetCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/screening-answers"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesScreeningAnswersGetValidateBeforeCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesScreeningAnswersGet(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesScreeningAnswersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesScreeningAnswersGetCall(id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get candidate screening answers for a candidate&#x27;s job
     * Returns candidate screening question answers for a candidate&#x27;s job. Returns an empty array when there is no screening answers for given candidate&#x27;s job.  UUID in question category indicates custom question. Other value indicates predefined library question.  In order to create human readable format of answers please use label properties. Ignore labels for answers with single field. Based on labels from included example you can get following text:  &#x60;&#x60;&#x60;text Do you have a current driver&#x27;s license?  - No  Free text question  - Long text answer for free text questions  Checkbox question  - Confirmed  Legacy acknowledgment question - replaced by checkbox  - Confirmed  Gender, Race and Ethnicity [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)  - Gender: Male  - Race/Ethnicity: Prefer not to answer  Currency question  - 1234  Multiple choice dropdown  - third value, second value, first value  Languages  1)  - Language: English  - Proficiency level: Advanced  2)  - Language: Spanish  - Proficiency level: Beginner  3)  - Language: French  - Proficiency level: Intermediate  What are your preferred work shifts? 1)  - Day: Weekdays  - From: 08:00 AM  - To: 04:00 PM 2)  - Day: Weekdays  - From: 10:00 AM  - To: 02:00 PM  Your Name  - John &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ScreeningAnswers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreeningAnswers candidatesScreeningAnswersGet(String id, String jobId) throws ApiException {
        ApiResponse<ScreeningAnswers> resp = candidatesScreeningAnswersGetWithHttpInfo(id, jobId);
        return resp.getData();
    }

    /**
     * Get candidate screening answers for a candidate&#x27;s job
     * Returns candidate screening question answers for a candidate&#x27;s job. Returns an empty array when there is no screening answers for given candidate&#x27;s job.  UUID in question category indicates custom question. Other value indicates predefined library question.  In order to create human readable format of answers please use label properties. Ignore labels for answers with single field. Based on labels from included example you can get following text:  &#x60;&#x60;&#x60;text Do you have a current driver&#x27;s license?  - No  Free text question  - Long text answer for free text questions  Checkbox question  - Confirmed  Legacy acknowledgment question - replaced by checkbox  - Confirmed  Gender, Race and Ethnicity [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)  - Gender: Male  - Race/Ethnicity: Prefer not to answer  Currency question  - 1234  Multiple choice dropdown  - third value, second value, first value  Languages  1)  - Language: English  - Proficiency level: Advanced  2)  - Language: Spanish  - Proficiency level: Beginner  3)  - Language: French  - Proficiency level: Intermediate  What are your preferred work shifts? 1)  - Day: Weekdays  - From: 08:00 AM  - To: 04:00 PM 2)  - Day: Weekdays  - From: 10:00 AM  - To: 02:00 PM  Your Name  - John &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;ScreeningAnswers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreeningAnswers> candidatesScreeningAnswersGetWithHttpInfo(String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesScreeningAnswersGetValidateBeforeCall(id, jobId, null, null);
        Type localVarReturnType = new TypeToken<ScreeningAnswers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get candidate screening answers for a candidate&#x27;s job (asynchronously)
     * Returns candidate screening question answers for a candidate&#x27;s job. Returns an empty array when there is no screening answers for given candidate&#x27;s job.  UUID in question category indicates custom question. Other value indicates predefined library question.  In order to create human readable format of answers please use label properties. Ignore labels for answers with single field. Based on labels from included example you can get following text:  &#x60;&#x60;&#x60;text Do you have a current driver&#x27;s license?  - No  Free text question  - Long text answer for free text questions  Checkbox question  - Confirmed  Legacy acknowledgment question - replaced by checkbox  - Confirmed  Gender, Race and Ethnicity [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)  - Gender: Male  - Race/Ethnicity: Prefer not to answer  Currency question  - 1234  Multiple choice dropdown  - third value, second value, first value  Languages  1)  - Language: English  - Proficiency level: Advanced  2)  - Language: Spanish  - Proficiency level: Beginner  3)  - Language: French  - Proficiency level: Intermediate  What are your preferred work shifts? 1)  - Day: Weekdays  - From: 08:00 AM  - To: 04:00 PM 2)  - Day: Weekdays  - From: 10:00 AM  - To: 02:00 PM  Your Name  - John &#x60;&#x60;&#x60; 
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesScreeningAnswersGetAsync(String id, String jobId, final ApiCallback<ScreeningAnswers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesScreeningAnswersGetValidateBeforeCall(id, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreeningAnswers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesSourceUpdate
     * @param body Candidate source to be set (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesSourceUpdateCall(CandidateSource body, String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/source"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesSourceUpdateValidateBeforeCall(CandidateSource body, String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesSourceUpdate(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesSourceUpdate(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesSourceUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesSourceUpdateCall(body, id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a candidate&#x27;s source
     * Update a candidate&#x27;s source
     * @param body Candidate source to be set (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesSourceUpdate(CandidateSource body, String id, String jobId) throws ApiException {
        candidatesSourceUpdateWithHttpInfo(body, id, jobId);
    }

    /**
     * Update a candidate&#x27;s source
     * Update a candidate&#x27;s source
     * @param body Candidate source to be set (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesSourceUpdateWithHttpInfo(CandidateSource body, String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesSourceUpdateValidateBeforeCall(body, id, jobId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a candidate&#x27;s source (asynchronously)
     * Update a candidate&#x27;s source
     * @param body Candidate source to be set (required)
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesSourceUpdateAsync(CandidateSource body, String id, String jobId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesSourceUpdateValidateBeforeCall(body, id, jobId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesStatusHistoryGet
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusHistoryGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/status/history"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesStatusHistoryGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesStatusHistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesStatusHistoryGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get candidate&#x27;s status history
     * Get candidate&#x27;s status history. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/status/history&#x60; instead.
     * @param id candidate identifier (required)
     * @return CandidateStatusHistoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateStatusHistoryList candidatesStatusHistoryGet(String id) throws ApiException {
        ApiResponse<CandidateStatusHistoryList> resp = candidatesStatusHistoryGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get candidate&#x27;s status history
     * Get candidate&#x27;s status history. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/status/history&#x60; instead.
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;CandidateStatusHistoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateStatusHistoryList> candidatesStatusHistoryGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesStatusHistoryGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CandidateStatusHistoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get candidate&#x27;s status history (asynchronously)
     * Get candidate&#x27;s status history. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/status/history&#x60; instead.
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusHistoryGetAsync(String id, final ApiCallback<CandidateStatusHistoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesStatusHistoryGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateStatusHistoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesStatusHistoryGetForJob
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusHistoryGetForJobCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/status/history"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesStatusHistoryGetForJobValidateBeforeCall(String id, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesStatusHistoryGetForJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesStatusHistoryGetForJob(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesStatusHistoryGetForJobCall(id, jobId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return CandidateStatusHistoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateStatusHistoryList candidatesStatusHistoryGetForJob(String id, String jobId) throws ApiException {
        ApiResponse<CandidateStatusHistoryList> resp = candidatesStatusHistoryGetForJobWithHttpInfo(id, jobId);
        return resp.getData();
    }

    /**
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;CandidateStatusHistoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateStatusHistoryList> candidatesStatusHistoryGetForJobWithHttpInfo(String id, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = candidatesStatusHistoryGetForJobValidateBeforeCall(id, jobId, null, null);
        Type localVarReturnType = new TypeToken<CandidateStatusHistoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get candidate&#x27;s status history for a candidate&#x27;s job (asynchronously)
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusHistoryGetForJobAsync(String id, String jobId, final ApiCallback<CandidateStatusHistoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesStatusHistoryGetForJobValidateBeforeCall(id, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateStatusHistoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesStatusUpdate
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param body Candidate Status to be set (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusUpdateCall(String id, String jobId, CandidateStatus body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/jobs/{jobId}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesStatusUpdateValidateBeforeCall(String id, String jobId, CandidateStatus body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesStatusUpdate(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling candidatesStatusUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesStatusUpdateCall(id, jobId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a candidate&#x27;s status
     * Update a candidate&#x27;s status
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param body Candidate Status to be set (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesStatusUpdate(String id, String jobId, CandidateStatus body) throws ApiException {
        candidatesStatusUpdateWithHttpInfo(id, jobId, body);
    }

    /**
     * Update a candidate&#x27;s status
     * Update a candidate&#x27;s status
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param body Candidate Status to be set (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesStatusUpdateWithHttpInfo(String id, String jobId, CandidateStatus body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesStatusUpdateValidateBeforeCall(id, jobId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a candidate&#x27;s status (asynchronously)
     * Update a candidate&#x27;s status
     * @param id candidate identifier (required)
     * @param jobId job identifier (required)
     * @param body Candidate Status to be set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusUpdateAsync(String id, String jobId, CandidateStatus body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesStatusUpdateValidateBeforeCall(id, jobId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesStatusUpdatePrimary
     * @param id candidate identifier (required)
     * @param body Candidate Status to be set (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusUpdatePrimaryCall(String id, CandidateStatus body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesStatusUpdatePrimaryValidateBeforeCall(String id, CandidateStatus body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesStatusUpdatePrimary(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesStatusUpdatePrimaryCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a candidate&#x27;s status on primary assignment
     * Update a candidate&#x27;s status on primary assignment. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/status&#x60; instead.
     * @param id candidate identifier (required)
     * @param body Candidate Status to be set (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesStatusUpdatePrimary(String id, CandidateStatus body) throws ApiException {
        candidatesStatusUpdatePrimaryWithHttpInfo(id, body);
    }

    /**
     * Update a candidate&#x27;s status on primary assignment
     * Update a candidate&#x27;s status on primary assignment. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/status&#x60; instead.
     * @param id candidate identifier (required)
     * @param body Candidate Status to be set (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesStatusUpdatePrimaryWithHttpInfo(String id, CandidateStatus body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesStatusUpdatePrimaryValidateBeforeCall(id, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a candidate&#x27;s status on primary assignment (asynchronously)
     * Update a candidate&#x27;s status on primary assignment. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/status&#x60; instead.
     * @param id candidate identifier (required)
     * @param body Candidate Status to be set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesStatusUpdatePrimaryAsync(String id, CandidateStatus body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesStatusUpdatePrimaryValidateBeforeCall(id, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesTagsAdd
     * @param body Tags to be added. (required)
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsAddCall(CandidateTags body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesTagsAddValidateBeforeCall(CandidateTags body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesTagsAdd(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesTagsAdd(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesTagsAddCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add tags to a candidate
     * Add new tags to a given candidate. It doesn&#x27;t replace existing tags.
     * @param body Tags to be added. (required)
     * @param id candidate identifier (required)
     * @return CandidateTags
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateTags candidatesTagsAdd(CandidateTags body, String id) throws ApiException {
        ApiResponse<CandidateTags> resp = candidatesTagsAddWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Add tags to a candidate
     * Add new tags to a given candidate. It doesn&#x27;t replace existing tags.
     * @param body Tags to be added. (required)
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;CandidateTags&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateTags> candidatesTagsAddWithHttpInfo(CandidateTags body, String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesTagsAddValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CandidateTags>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add tags to a candidate (asynchronously)
     * Add new tags to a given candidate. It doesn&#x27;t replace existing tags.
     * @param body Tags to be added. (required)
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsAddAsync(CandidateTags body, String id, final ApiCallback<CandidateTags> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesTagsAddValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateTags>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesTagsDelete
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsDeleteCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesTagsDeleteValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesTagsDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesTagsDeleteCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete tags for a candidate
     * Delete tags for a given candidate. All tags associated with a candidate are removed.
     * @param id candidate identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void candidatesTagsDelete(String id) throws ApiException {
        candidatesTagsDeleteWithHttpInfo(id);
    }

    /**
     * Delete tags for a candidate
     * Delete tags for a given candidate. All tags associated with a candidate are removed.
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> candidatesTagsDeleteWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesTagsDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete tags for a candidate (asynchronously)
     * Delete tags for a given candidate. All tags associated with a candidate are removed.
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsDeleteAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesTagsDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for candidatesTagsGet
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesTagsGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesTagsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesTagsGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get tags for a candidate
     * 
     * @param id candidate identifier (required)
     * @return CandidateTags
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateTags candidatesTagsGet(String id) throws ApiException {
        ApiResponse<CandidateTags> resp = candidatesTagsGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get tags for a candidate
     * 
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;CandidateTags&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateTags> candidatesTagsGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesTagsGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CandidateTags>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tags for a candidate (asynchronously)
     * 
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsGetAsync(String id, final ApiCallback<CandidateTags> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesTagsGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateTags>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesTagsReplace
     * @param body Tags to be set. (required)
     * @param id candidate identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsReplaceCall(CandidateTags body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesTagsReplaceValidateBeforeCall(CandidateTags body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling candidatesTagsReplace(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesTagsReplace(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesTagsReplaceCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update tags for a candidate
     * Update tags for a given candidate. It replaces all existing tags with the new array provided.
     * @param body Tags to be set. (required)
     * @param id candidate identifier (required)
     * @return CandidateTags
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateTags candidatesTagsReplace(CandidateTags body, String id) throws ApiException {
        ApiResponse<CandidateTags> resp = candidatesTagsReplaceWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Update tags for a candidate
     * Update tags for a given candidate. It replaces all existing tags with the new array provided.
     * @param body Tags to be set. (required)
     * @param id candidate identifier (required)
     * @return ApiResponse&lt;CandidateTags&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateTags> candidatesTagsReplaceWithHttpInfo(CandidateTags body, String id) throws ApiException {
        com.squareup.okhttp.Call call = candidatesTagsReplaceValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CandidateTags>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update tags for a candidate (asynchronously)
     * Update tags for a given candidate. It replaces all existing tags with the new array provided.
     * @param body Tags to be set. (required)
     * @param id candidate identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesTagsReplaceAsync(CandidateTags body, String id, final ApiCallback<CandidateTags> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesTagsReplaceValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateTags>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for candidatesUpdate
     * @param id candidate identifier (required)
     * @param body Candidate personal information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call candidatesUpdateCall(String id, PersonalDetails body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/candidates/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call candidatesUpdateValidateBeforeCall(String id, PersonalDetails body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling candidatesUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = candidatesUpdateCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update candidate personal information
     * Update candidate details
     * @param id candidate identifier (required)
     * @param body Candidate personal information (optional)
     * @return CandidateDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CandidateDetails candidatesUpdate(String id, PersonalDetails body) throws ApiException {
        ApiResponse<CandidateDetails> resp = candidatesUpdateWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Update candidate personal information
     * Update candidate details
     * @param id candidate identifier (required)
     * @param body Candidate personal information (optional)
     * @return ApiResponse&lt;CandidateDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CandidateDetails> candidatesUpdateWithHttpInfo(String id, PersonalDetails body) throws ApiException {
        com.squareup.okhttp.Call call = candidatesUpdateValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update candidate personal information (asynchronously)
     * Update candidate details
     * @param id candidate identifier (required)
     * @param body Candidate personal information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call candidatesUpdateAsync(String id, PersonalDetails body, final ApiCallback<CandidateDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = candidatesUpdateValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CandidateDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
