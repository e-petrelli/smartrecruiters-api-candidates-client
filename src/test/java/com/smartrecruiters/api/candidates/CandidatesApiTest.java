/*
 * Candidates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.smartrecruiters.api.candidates;

import com.smartrecruiters.api.ApiException;
import com.smartrecruiters.api.candidates.model.Application;
import com.smartrecruiters.api.candidates.model.Attachment;
import com.smartrecruiters.api.candidates.model.Attachments;
import com.smartrecruiters.api.candidates.model.CandidateAttachmentForJob;
import com.smartrecruiters.api.candidates.model.CandidateAttachmentsForJob;
import com.smartrecruiters.api.candidates.model.CandidateConsentStatus;
import com.smartrecruiters.api.candidates.model.CandidateDetails;
import com.smartrecruiters.api.candidates.model.CandidateInput;
import com.smartrecruiters.api.candidates.model.CandidateProperties;
import com.smartrecruiters.api.candidates.model.CandidatePropertyInputValue;
import com.smartrecruiters.api.candidates.model.CandidateSource;
import com.smartrecruiters.api.candidates.model.CandidateStatus;
import com.smartrecruiters.api.candidates.model.CandidateStatusHistoryList;
import com.smartrecruiters.api.candidates.model.CandidateTags;
import com.smartrecruiters.api.candidates.model.Candidates;
import com.smartrecruiters.api.candidates.model.ConsentRequestsResults;
import com.smartrecruiters.api.candidates.model.ConsentStatus;
import com.smartrecruiters.api.candidates.model.ErrorResponse;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import com.smartrecruiters.api.candidates.model.OnboardingStatus;
import com.smartrecruiters.api.candidates.model.PersonalDetails;
import com.smartrecruiters.api.candidates.model.ScreeningAnswers;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CandidatesApi
 */
@Ignore
public class CandidatesApiTest {

    private final CandidatesApi api = new CandidatesApi();

    /**
     * Create a new candidate and assign to a Talent Pool
     *
     * Create a new candidate and assign to a Talent Pool.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app/integration, add below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app/integration is productised (available to all SmartRecruiters customers) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAddTest() throws ApiException {
        CandidateInput body = null;
        CandidateDetails response = api.candidatesAdd(body);

        // TODO: test validations
    }
    /**
     * Create a new candidate and assign to a job
     *
     * Create a new candidate and assign to a job.  **Tracking candidate source**  When adding a new candidate, it&#x27;s very important you track its source appropriately. In order to associate a source with your app / integration, add the below object to a candidate body object for this endpoint: &#x60;&#x60;&#x60; {   \&quot;sourceDetails\&quot;: {     \&quot;sourceTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceSubTypeId\&quot;: \&quot;string\&quot;,     \&quot;sourceId\&quot;: \&quot;string\&quot;   } } &#x60;&#x60;&#x60; **sourceTypeId** - it&#x27;s a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceSubTypeId** - it&#x27;s a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.types) endpoint  **sourceId** - it&#x27;s a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/configuration-api/#/configuration/configuration.source.values.all) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can&#x27;t find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app / integration is productised (available to all SmartRecruiters customers) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAddToJobTest() throws ApiException {
        CandidateInput body = null;
        String jobId = null;
        CandidateDetails response = api.candidatesAddToJob(body, jobId);

        // TODO: test validations
    }
    /**
     * Search candidates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAllTest() throws ApiException {
        String q = null;
        Integer limit = null;
        Integer offset = null;
        String pageId = null;
        List<String> jobId = null;
        List<String> location = null;
        List<Integer> averageRating = null;
        List<String> status = null;
        List<ConsentStatus> consentStatus = null;
        String subStatus = null;
        List<String> tag = null;
        OffsetDateTime updatedAfter = null;
        String onboardingStatus = null;
        List<String> propertyId = null;
        List<String> propertyValueId = null;
        List<String> sourceType = null;
        List<String> sourceSubType = null;
        List<String> sourceValueId = null;
        List<String> questionCategory = null;
        List<String> questionFieldId = null;
        List<String> questionFieldValueId = null;
        Candidates response = api.candidatesAll(q, limit, offset, pageId, jobId, location, averageRating, status, consentStatus, subStatus, tag, updatedAfter, onboardingStatus, propertyId, propertyValueId, sourceType, sourceSubType, sourceValueId, questionCategory, questionFieldId, questionFieldValueId);

        // TODO: test validations
    }
    /**
     * Attach files to a candidate.
     *
     * Attach files to a candidate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsAddTest() throws ApiException {
        String id = null;
        String attachmentType = null;
        File file = null;
        Attachment response = api.candidatesAttachmentsAdd(id, attachmentType, file);

        // TODO: test validations
    }
    /**
     * Attach file to candidate in context of given job.
     *
     * Attach file to candidate in context of given job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsAddForJobTest() throws ApiException {
        String id = null;
        String jobId = null;
        String attachmentType = null;
        File file = null;
        CandidateAttachmentForJob response = api.candidatesAttachmentsAddForJob(id, jobId, attachmentType, file);

        // TODO: test validations
    }
    /**
     * Delete attachment.
     *
     * Delete attachment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsDeleteForJobTest() throws ApiException {
        String attachmentId = null;
        api.candidatesAttachmentsDeleteForJob(attachmentId);

        // TODO: test validations
    }
    /**
     * Get a candidate&#x27;s attachment.
     *
     * Get a candidate&#x27;s attachment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsGetTest() throws ApiException {
        String id = null;
        String attachmentId = null;
        api.candidatesAttachmentsGet(id, attachmentId);

        // TODO: test validations
    }
    /**
     * Get candidate&#x27;s attachment.
     *
     * Get candidate&#x27;s attachment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsGetForJobTest() throws ApiException {
        String attachmentId = null;
        api.candidatesAttachmentsGetForJob(attachmentId);

        // TODO: test validations
    }
    /**
     * Get list candidate&#x27;s attachments.
     *
     * Get list of candidate&#x27;s attachments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsListTest() throws ApiException {
        String id = null;
        Attachments response = api.candidatesAttachmentsList(id);

        // TODO: test validations
    }
    /**
     * Get list of candidate&#x27;s attachments in context of given job.
     *
     * Get list of candidate&#x27;s attachments in context of given job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesAttachmentsListForJobTest() throws ApiException {
        String id = null;
        String jobId = null;
        CandidateAttachmentsForJob response = api.candidatesAttachmentsListForJob(id, jobId);

        // TODO: test validations
    }
    /**
     * Request consent from multiple candidates
     *
     * Read more about GDPR tools on [SmartRecruiters HelpCenter](https://help.smartrecruiters.com/GDPR/GDPR_Tools_for_Companies) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesConsentRequestBatchTest() throws ApiException {
        Object body = null;
        ConsentRequestsResults response = api.candidatesConsentRequestBatch(body);

        // TODO: test validations
    }
    /**
     * Status of candidate consent
     *
     * Get candidate consent status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesConsentStatusTest() throws ApiException {
        String id = null;
        CandidateConsentStatus response = api.candidatesConsentStatus(id);

        // TODO: test validations
    }
    /**
     * Delete Candidate
     *
     * Delete candidate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesDeleteTest() throws ApiException {
        String id = null;
        api.candidatesDelete(id);

        // TODO: test validations
    }
    /**
     * Get details of a candidate
     *
     * Get details of a candidate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesGetTest() throws ApiException {
        String id = null;
        CandidateDetails response = api.candidatesGet(id);

        // TODO: test validations
    }
    /**
     * Get details of a candidate&#x27;s application to a job
     *
     * Get details of a candidate&#x27;s application to a job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesGetApplicationTest() throws ApiException {
        String id = null;
        String jobId = null;
        Application response = api.candidatesGetApplication(id, jobId);

        // TODO: test validations
    }
    /**
     * Get Onboarding Status for a candidate
     *
     * Get Onboarding Status for a candidate. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesOnboardingGetTest() throws ApiException {
        String id = null;
        OnboardingStatus response = api.candidatesOnboardingGet(id);

        // TODO: test validations
    }
    /**
     * Get Onboarding Status for a candidate associated with given job
     *
     * Get Onboarding Status for a candidate associated with given job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesOnboardingGetForJobTest() throws ApiException {
        String id = null;
        String jobId = null;
        OnboardingStatus response = api.candidatesOnboardingGetForJob(id, jobId);

        // TODO: test validations
    }
    /**
     * Set Onboarding Status for a candidate
     *
     * Set Onboarding Status for a candidate. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/onboardingStatus&#x60; instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesOnboardingUpdateTest() throws ApiException {
        OnboardingStatus body = null;
        String id = null;
        api.candidatesOnboardingUpdate(body, id);

        // TODO: test validations
    }
    /**
     * Sets Onboarding Status for a candidate associated with given job
     *
     * Sets Onboarding Status for a candidate associated with given job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesOnboardingUpdateForJobTest() throws ApiException {
        OnboardingStatus body = null;
        String id = null;
        String jobId = null;
        api.candidatesOnboardingUpdateForJob(body, id, jobId);

        // TODO: test validations
    }
    /**
     * Get candidate property values for a candidate
     *
     * Please use &#x60;GET /candidates/{id}/jobs/{jobId}/properties&#x60; instead. Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesPropertiesGetTest() throws ApiException {
        String id = null;
        String context = null;
        CandidateProperties response = api.candidatesPropertiesGet(id, context);

        // TODO: test validations
    }
    /**
     * Get candidate property values for a candidate&#x27;s job
     *
     * Returns &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; when there is no value set for a candidate property. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesPropertiesGetForJobTest() throws ApiException {
        String id = null;
        String jobId = null;
        String context = null;
        CandidateProperties response = api.candidatesPropertiesGetForJob(id, jobId, context);

        // TODO: test validations
    }
    /**
     * Add/update candidate property value
     *
     * Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/properties/{propertyId}&#x60; instead. Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60; Value has to be &#x60;true&#x60; or &#x60;false&#x60;. * **COUNTRY** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60; Code of value is a currency code in ISO 4217 format. * **DATE** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60; * **NUMBER, PERCENT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60; * **REGION** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60; Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60; Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60; * **USER** &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60; Value has to be a valid user id  To reset a value for any of the above types, please pass &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesPropertiesValuesUpdateTest() throws ApiException {
        String id = null;
        String propertyId = null;
        CandidatePropertyInputValue body = null;
        api.candidatesPropertiesValuesUpdate(id, propertyId, body);

        // TODO: test validations
    }
    /**
     * Add/update candidate property value
     *
     * Set a candidate property value for the candidate.  Below you can find a list of value examples, dependent on different candidate property types.  ### BOOLEAN  &#x60;&#x60;&#x60; { \&quot;value\&quot;: true } &#x60;&#x60;&#x60;  Value has to be &#x60;true&#x60; or &#x60;false&#x60;.  ### COUNTRY  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-1 alpha-2 format.  ### CURRENCY  &#x60;&#x60;&#x60; {   \&quot;value\&quot;: {     \&quot;code\&quot;: \&quot;GBP\&quot;,     \&quot;value\&quot;: 23232   } } &#x60;&#x60;&#x60;  Code of value is a currency code in ISO 4217 format.  ### DATE  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;2015-11-17T23:00:00.000Z\&quot; } &#x60;&#x60;&#x60;  ### NUMBER, PERCENT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: 42 } &#x60;&#x60;&#x60;  ### REGION  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;us-wa\&quot; } &#x60;&#x60;&#x60;  Value has to be lowercase string in ISO 3166-2 compatible format.  ### SINGLE_SELECT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;f6fe768f-b5e6-4794-9938-c2f42ab0a572\&quot; } &#x60;&#x60;&#x60;  Value has to be an id of candidate property value (provided by &#x60;GET /configuration/candidate-properties/{propertyId}/values&#x60;).  ### TEXT  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;Example text\&quot; } &#x60;&#x60;&#x60;  ### USER  &#x60;&#x60;&#x60; { \&quot;value\&quot;: \&quot;50fe861de4b00265edec6775\&quot; } &#x60;&#x60;&#x60;  Value has to be a valid user id  ### Resetting a value  To reset a value for any of the above types, please pass:  &#x60;&#x60;&#x60; {} &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesPropertiesValuesUpdateForJobTest() throws ApiException {
        String id = null;
        String jobId = null;
        String propertyId = null;
        CandidatePropertyInputValue body = null;
        api.candidatesPropertiesValuesUpdateForJob(id, jobId, propertyId, body);

        // TODO: test validations
    }
    /**
     * Parse a resume, create a candidate and assign to a Talent Pool.
     *
     * Parse a resume, create a candidate and assign to a Talent Pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesResumeAddTest() throws ApiException {
        String sourceTypeId = null;
        String sourceSubTypeId = null;
        String sourceId = null;
        Boolean internal = null;
        File file = null;
        CandidateDetails response = api.candidatesResumeAdd(sourceTypeId, sourceSubTypeId, sourceId, internal, file);

        // TODO: test validations
    }
    /**
     * Parse a resume, create a candidate and assign to a job.
     *
     * Parse a resume, create a candidate and assign to a job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesResumeAddToJobTest() throws ApiException {
        String jobId = null;
        String sourceTypeId = null;
        String sourceSubTypeId = null;
        String sourceId = null;
        Boolean internal = null;
        File file = null;
        CandidateDetails response = api.candidatesResumeAddToJob(jobId, sourceTypeId, sourceSubTypeId, sourceId, internal, file);

        // TODO: test validations
    }
    /**
     * Get candidate screening answers for a candidate&#x27;s job
     *
     * Returns candidate screening question answers for a candidate&#x27;s job. Returns an empty array when there is no screening answers for given candidate&#x27;s job.  UUID in question category indicates custom question. Other value indicates predefined library question.  In order to create human readable format of answers please use label properties. Ignore labels for answers with single field. Based on labels from included example you can get following text:  &#x60;&#x60;&#x60;text Do you have a current driver&#x27;s license?  - No  Free text question  - Long text answer for free text questions  Checkbox question  - Confirmed  Legacy acknowledgment question - replaced by checkbox  - Confirmed  Gender, Race and Ethnicity [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)  - Gender: Male  - Race/Ethnicity: Prefer not to answer  Currency question  - 1234  Multiple choice dropdown  - third value, second value, first value  Languages  1)  - Language: English  - Proficiency level: Advanced  2)  - Language: Spanish  - Proficiency level: Beginner  3)  - Language: French  - Proficiency level: Intermediate  What are your preferred work shifts? 1)  - Day: Weekdays  - From: 08:00 AM  - To: 04:00 PM 2)  - Day: Weekdays  - From: 10:00 AM  - To: 02:00 PM  Your Name  - John &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesScreeningAnswersGetTest() throws ApiException {
        String id = null;
        String jobId = null;
        ScreeningAnswers response = api.candidatesScreeningAnswersGet(id, jobId);

        // TODO: test validations
    }
    /**
     * Update a candidate&#x27;s source
     *
     * Update a candidate&#x27;s source
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesSourceUpdateTest() throws ApiException {
        CandidateSource body = null;
        String id = null;
        String jobId = null;
        api.candidatesSourceUpdate(body, id, jobId);

        // TODO: test validations
    }
    /**
     * Get candidate&#x27;s status history
     *
     * Get candidate&#x27;s status history. Please use &#x60;GET /candidates/{id}/jobs/{jobId}/status/history&#x60; instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesStatusHistoryGetTest() throws ApiException {
        String id = null;
        CandidateStatusHistoryList response = api.candidatesStatusHistoryGet(id);

        // TODO: test validations
    }
    /**
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     *
     * Get candidate&#x27;s status history for a candidate&#x27;s job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesStatusHistoryGetForJobTest() throws ApiException {
        String id = null;
        String jobId = null;
        CandidateStatusHistoryList response = api.candidatesStatusHistoryGetForJob(id, jobId);

        // TODO: test validations
    }
    /**
     * Update a candidate&#x27;s status
     *
     * Update a candidate&#x27;s status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesStatusUpdateTest() throws ApiException {
        String id = null;
        String jobId = null;
        CandidateStatus body = null;
        api.candidatesStatusUpdate(id, jobId, body);

        // TODO: test validations
    }
    /**
     * Update a candidate&#x27;s status on primary assignment
     *
     * Update a candidate&#x27;s status on primary assignment. Please use &#x60;PUT /candidates/{id}/jobs/{jobId}/status&#x60; instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesStatusUpdatePrimaryTest() throws ApiException {
        String id = null;
        CandidateStatus body = null;
        api.candidatesStatusUpdatePrimary(id, body);

        // TODO: test validations
    }
    /**
     * Add tags to a candidate
     *
     * Add new tags to a given candidate. It doesn&#x27;t replace existing tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesTagsAddTest() throws ApiException {
        CandidateTags body = null;
        String id = null;
        CandidateTags response = api.candidatesTagsAdd(body, id);

        // TODO: test validations
    }
    /**
     * Delete tags for a candidate
     *
     * Delete tags for a given candidate. All tags associated with a candidate are removed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesTagsDeleteTest() throws ApiException {
        String id = null;
        api.candidatesTagsDelete(id);

        // TODO: test validations
    }
    /**
     * Get tags for a candidate
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesTagsGetTest() throws ApiException {
        String id = null;
        CandidateTags response = api.candidatesTagsGet(id);

        // TODO: test validations
    }
    /**
     * Update tags for a candidate
     *
     * Update tags for a given candidate. It replaces all existing tags with the new array provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesTagsReplaceTest() throws ApiException {
        CandidateTags body = null;
        String id = null;
        CandidateTags response = api.candidatesTagsReplace(body, id);

        // TODO: test validations
    }
    /**
     * Update candidate personal information
     *
     * Update candidate details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void candidatesUpdateTest() throws ApiException {
        String id = null;
        PersonalDetails body = null;
        CandidateDetails response = api.candidatesUpdate(id, body);

        // TODO: test validations
    }
}
